#!/bin/bash

RUNTYPE="$1"
MAC=`ifconfig en0 | awk '/ether/ {print $2}'`
SERIAL=`/usr/sbin/ioreg -l | grep IOPlatformSerialNumber | cut -f 4 -d \"`
NAME="$(echo `systemsetup -getcomputername | cut -d: -f2-`)"
BASEURL="http://localhost:8444"
REPORTPATH="/etc/munki/ManagedInstallReport.plist"
PLISTBUDDY="/usr/libexec/PlistBuddy"
SUBMITURL="${BASEURL}/update"
LOOKUPURL="${BASEURL}/lookup/ip"
MANIFESTURL="${BASEURL}/lookup/get_manifest"
PREFPLIST="/var/root/Library/Preferences/ManagedInstalls.plist"
# Enter a list of networks where Munki runs are allowed.
#ALLOWED_PREFIXES=( 209.2 128.59 156.111 69.86 160.39 207.10 )
# To skip the network check, set ALLOWED_PREFIXES to an empty list:
ALLOWED_PREFIXES=( )

if [ "$RUNTYPE" == "custom" -o "$RUNTYPE" == "auto" ]; then
    if [ ! -z "$ALLOWED_PREFIXES" ]; then
        echo "Checking network"
        
        external_ip=`curl --max-time 5 --silent --fail "${LOOKUPURL}"`
        if [ $? -ne 0 ]; then
            echo "External IP lookup failed, aborting munki run"
            exit 1
        fi
        
        prefix_ok="no"
        for prefix in ${ALLOWED_PREFIXES[@]}; do
            echo -n "Checking $prefix for IP address $external_ip"
            prefix_len=$( echo `echo "$prefix" | tr . '\012' | wc -l` )
            for (( i=$prefix_len ; i<4 ; i++ )); do
                echo -n '.x'
            done
            my_ip_prefix=`echo $external_ip | cut -d. -f1-$prefix_len`
            if [ "$my_ip_prefix" == "$prefix" ]; then
                echo ": Inside"
                prefix_ok="yes"
                break
            else
                echo ": Outside"
            fi
        done
        if [ "$prefix_ok" == "yes" ]; then
            echo "Network check OK, proceeding with munki run"
        else
            echo "Network check failed, aborting munki run"
            exit 1
        fi
    fi
fi

manifest=`curl --max-time 5 --silent -d serial="$SERIAL" --fail "${MANIFESTURL}"`
client_manifest=`$PLISTBUDDY -c "Print :ClientIdentifier" $PREFPLIST`

if [ "$client_manifest" != "$manifest" ]
then
    if [[  $manifest =~ "none" ]]
    then
        echo "my manifest $manifest is empty"
    else
        if [ ${#manifest} = 0 ]
        then
            echo "my manifest $manifest is empty"
        else
            echo "client's manifest ($client_manifest) doesn't match the server's record ($manifest), please run Managed Software Update.app again."
            `$PLISTBUDDY -c "Set :ClientIdentifier $manifest" $PREFPLIST`
            client_manifest=`$PLISTBUDDY -c "Print :ClientIdentifier" $PREFPLIST`
            exit 1
        fi
    fi
fi

# Submit to server.

curl --max-time 30 --silent \
    -d runtype="$RUNTYPE" \
    -d mac="$MAC" \
    -d name="$NAME" \
    -d serial="$SERIAL" \
    -d manifest="$client_manifest" \
    "$SUBMITURL/preflight"

exit 0
